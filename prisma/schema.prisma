// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(cuid())
  auth0UserId     String @unique
  preferredLocale String @default("en")
  refCurrency     String @default("USD")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts                Account[]
  assetClasses            AssetClass[]
  transactions            Transaction[]
  bookings                Booking[]
  incomeCategories        IncomeCategory[]
  expenseCategories       ExpenseCategory[]
}

model Account {
  id   String      @default(cuid())
  name String
  slug String
  type AccountType @default(ASSET)

  assetClass   AssetClass? @relation(fields: [assetClassId, userId], references: [id, userId])
  assetClassId String?

  unit AccountUnit @default(CURRENCY)

  currency String?

  preExisting Boolean @default(false)

  balanceAtStart Decimal?

  openingDate DateTime? @db.Date
  closingDate DateTime? @db.Date

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId String

  bookings Booking[]

  @@id([id, userId])
  @@unique([slug, userId])
}

model AssetClass {
  id        String    @default(cuid())
  name      String
  sortOrder Int       @default(0)
  accounts  Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId String

  @@id([id, userId])
}

enum AccountUnit {
  CURRENCY
  STOCK
}

enum AccountType {
  ASSET
  LIABILITY
}

model IncomeCategory {
  id   String            @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId   String

  bookings Booking[]

  @@id([id, userId])
}

model ExpenseCategory {
  id   String            @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId   String

  bookings Booking[]

  @@id([id, userId])
}

// TODO think about how to model value changes --> maybe better a separate model beside transaction? or just a special transaction/booking type with guided form? 
model Transaction {
  id   String   @default(cuid())
  note String?

  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId String

  @@id([id, userId])
}

model Booking {
  id   String      @default(cuid())
  date DateTime @db.Date
  type BookingType

  note String?

  account   Account? @relation(fields: [accountId, userId], references: [id, userId], onDelete: Restrict)
  accountId String?

  transaction   Transaction @relation(fields: [transactionId, userId], references: [id, userId], onDelete: Cascade)
  transactionId String

  incomeCategory IncomeCategory? @relation(fields: [incomeCategoryId, userId], references: [id, userId], onDelete: Restrict)
  incomeCategoryId String?

  expenseCategory ExpenseCategory? @relation(fields: [expenseCategoryId, userId], references: [id, userId], onDelete: Restrict)
  expenseCategoryId String?

  currency String?

  amount Decimal

  sortOrder Int @default(0)

  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId String

  @@id([id, userId])
}

enum BookingType {
  CHARGE
  DEPOSIT
  INCOME
  EXPENSE
}
